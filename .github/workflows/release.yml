name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run tests
        run: go test -v ./...

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sign-macos:
    needs: release
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the release
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --jq '.id')
          
          # Download the appropriate Darwin binary
          gh api repos/${{ github.repository }}/releases/${RELEASE_ID}/assets \
            --jq '.[] | select(.name | contains("Darwin_${{ matrix.arch }}")) | .url' | \
            xargs -I {} gh api {} -H "Accept: application/octet-stream" > tokencount_Darwin_${{ matrix.arch }}.tar.gz
          
          # Extract
          tar -xzf tokencount_Darwin_${{ matrix.arch }}.tar.gz

      - name: Sign and Notarize
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          if [ -n "$MACOS_CERTIFICATE" ]; then
            .github/scripts/sign-and-notarize.sh tokencount scripts/entitlements.plist
          else
            echo "⚠️ Skipping signing - no certificate configured"
          fi

      - name: Re-package signed binary
        run: |
          if [ -n "${{ secrets.MACOS_CERTIFICATE }}" ]; then
            tar -czf tokencount_Darwin_${{ matrix.arch }}_signed.tar.gz tokencount
          fi

      - name: Upload signed binary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        run: |
          if [ -n "$MACOS_CERTIFICATE" ] && [ -f "tokencount_Darwin_${{ matrix.arch }}_signed.tar.gz" ]; then
            # Use gh release upload command instead of API
            gh release upload ${{ github.ref_name }} \
              tokencount_Darwin_${{ matrix.arch }}_signed.tar.gz \
              --clobber
          else
            echo "⚠️ No signed binary to upload"
          fi